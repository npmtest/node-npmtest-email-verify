{"/home/travis/build/npmtest/node-npmtest-email-verify/test.js":"/* istanbul instrument in package npmtest_email_verify */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-email-verify/lib.npmtest_email_verify.js":"/* istanbul instrument in package npmtest_email_verify */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_email_verify = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_email_verify = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-email-verify/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-email-verify && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_email_verify */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_email_verify\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_email_verify.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_email_verify.rollup.js'] =\n            local.assetsDict['/assets.npmtest_email_verify.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_email_verify.__dirname +\n                    '/lib.npmtest_email_verify.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-email-verify/node_modules/email-verify/index.js":"'use strict'\n\nlet validator = require('email-validator'),\n    dns = require('dns'),\n    net = require('net'),\n    logger = require('./logger.js').logger\n\nconst defaultOptions = {\n  port: 25,\n  sender: 'name@example.org',\n  timeout: 0,\n  fqdn: 'mail.example.org',\n  ignore: false\n}\n\nconst errors = {\n  missing: {\n    email: 'Missing email parameter',\n    options: 'Missing options parameter',\n    callback: 'Missing callback function'\n  },\n  invalid: {\n    email: 'Invalid Email Structure'\n  },\n  exception: {\n\n  }\n}\n\nfunction optionsDefaults(options) {\n  if( !options ) options = {}\n  Object.keys(defaultOptions).forEach(function(key){\n    if(options && !options[key]) options[key] = defaultOptions[key]\n  })\n  return options\n}\n\nfunction dnsConfig(options){\n  try {\n    if( Array.isArray(options.dns) ) dns.setServers(options.dns)\n    else dns.setServers([options.dns])\n  }\n  catch(e){\n    throw new Error('Invalid DNS Options');\n  }\n}\n\n/*\n  Ideally you give the arguments as in the function signature. However, other valid signatures would include:\n\n  email,callback (using default options, not advised)\n\n  options,callback (using options.email for the email)\n\n  This is supporting the legacy (email,options,callback) as well as the (options,callback) that is promisify compatible\n\n*/\n\nmodule.exports.verify = function verify(email,options,callback){\n  let params = {}\n  let args = (arguments.length === 1 ? [arguments[0]] : Array.apply(null, arguments))\n\n  args.forEach(function(arg){\n    if( typeof arg === 'string' ){\n      params.email = arg\n    }\n    else if( typeof arg === 'object' ){\n      params.options = arg\n    }\n    else if( typeof arg === 'function' ){\n      params.callback = arg\n    }\n  })\n\n  if( !params.email && params.options.email && typeof params.options.email === 'string' ) params.email = params.options.email\n  params.options = optionsDefaults(params.options)\n\n  if( !params.email ) throw new Error(errors.missing.email)\n  if( !params.options ) throw new Error(errors.missing.options)\n  if( !params.callback ) throw new Error(errors.missing.callback)\n\n  if( !validator.validate(params.email) ) return params.callback(null, { success: false, info: 'Invalid Email Structure', addr: email, params: params })\n\n  if( params.options.dns ) dnsConfig(params.options)\n\n  logger.info(\"# Veryfing \" + params.email)\n\n  startDNSQueries(params)\n\n}\n\nfunction startDNSQueries(params){\n  let domain = params.email.split(/[@]/).splice(-1)[0].toLowerCase()\n\n  logger.info(\"Resolving DNS... \" + domain)\n  dns.resolveMx(domain,(err,addresses) => {\n    if (err || (typeof addresses === 'undefined')) {\n      params.callback(err, null);\n    }\n    else if (addresses && addresses.length <= 0) {\n      params.callback(null, { success: false, info: 'No MX Records' });\n    }\n    else{\n      params.addresses = addresses\n\n      // Find the lowest priority mail server\n      let priority = 10000,\n          lowestPriorityIndex = 0\n\n      for (let i = 0 ; i < addresses.length ; i++) {\n        if (addresses[i].priority < priority) {\n            priority = addresses[i].priority\n            lowestPriorityIndex = i\n            logger.info('MX Records ' + JSON.stringify(addresses[i]))\n        }\n      }\n\n      params.options.smtp = addresses[lowestPriorityIndex].exchange\n      logger.info(\"Choosing \" + params.options.smtp + \" for connection\")\n      beginSMTPQueries(params)\n    }\n\n\n  })\n}\n\nfunction beginSMTPQueries(params){\n\n  let stage = 0,\n      success = false,\n      response = '',\n      completed = false,\n      ended = false,\n      tryagain = false\n\n  logger.info(\"Creating connection...\")\n  let socket = net.createConnection(params.options.port, params.options.smtp)\n\n  let callback = (err,object) => {\n    callback = () => {} // multiple sources could call the callback, replace the function immediately to prevent it from being called twice\n    ended = true\n    return params.callback(err,object)\n  }\n\n  let advanceToNextStage = () => {\n    stage++\n    response = ''\n  }\n\n  if( params.options.timeout > 0 ){\n    socket.setTimeout(params.options.timeout,() => {\n      callback(null,{ success: false, info: 'Connection Timed Out', addr: params.email })\n      socket.destroy()\n    })\n  }\n\n  socket.on('data', function(data) {\n    response += data.toString();\n    completed = response.slice(-1) === '\\n';\n    if (completed) {\n        logger.server(response)\n        switch(stage) {\n            case 0: if (response.indexOf('220') > -1 && !ended) {\n                        // Connection Worked\n                        var cmd = 'EHLO '+params.options.fqdn+'\\r\\n'\n                        logger.client(cmd)\n                        socket.write(cmd,function() { stage++; response = ''; });\n                    }\n                    else{\n                        if (response.indexOf('421') > -1 || response.indexOf('450') > -1 || response.indexOf('451') > -1)\n                            tryagain = true;\n                        socket.end();\n                    }\n                    break;\n            case 1: if (response.indexOf('250') > -1 && !ended) {\n                        // Connection Worked\n                        var cmd = 'MAIL FROM:<'+params.options.sender+'>\\r\\n'\n                        logger.client(cmd)\n                        socket.write(cmd,function() { stage++; response = ''; });\n                    }\n                    else{\n                        socket.end();\n                    }\n                    break;\n            case 2: if (response.indexOf('250') > -1 && !ended) {\n                        // MAIL Worked\n                        var cmd = 'RCPT TO:<' + params.email + '>\\r\\n'\n                        logger.client(cmd)\n                        socket.write(cmd,function() { stage++; response = ''; });\n                    }\n                    else{\n                        socket.end();\n                    }\n                    break;\n            case 3: if (response.indexOf('250') > -1 || (params.options.ignore && response.indexOf(params.options.ignore) > -1)) {\n                        // RCPT Worked\n                        success = true;\n                    }\n                    stage++;\n                    response = '';\n                    // close the connection cleanly.\n                    if(!ended) {\n                      var cmd = 'QUIT\\r\\n'\n                      logger.client(cmd)\n                      socket.write(cmd);\n                    }\n                    break;\n            case 4:\n              socket.end();\n        }\n\n    }\n  })\n\n  socket.on('connect', function(data) {\n    logger.info(\"Connected\")\n  })\n\n  socket.on('error', function(err) {\n    logger.error(\"Connection error\")\n    callback( err, { success: false, info: null, addr: params.email })\n  })\n\n  socket.on('end', function() {\n    logger.info(\"Closing connection\")\n    callback(null, { success: success, info: (params.email + ' is ' + (success ? 'a valid' : 'an invalid') + ' address'), addr: params.email })\n  })\n\n}\n","/home/travis/build/npmtest/node-npmtest-email-verify/node_modules/email-verify/logger.js":"var debug = false\n\nvar log = function(level, msg) {\n  if(debug) {\n    console.log(level + \": \" + msg)\n  }\n}\n\nvar logArray = function(level, array) {\n  if(debug) {\n    for(var i = 0; i < array.length; i++) {\n      console.log(level + \": \" + array[i])\n    }\n  }\n}\n\nmodule.exports.logger = {\n  info: function(msg) {\n    log('INFO', msg)\n  },\n  error: function(msg) {\n    log('ERROR', msg)\n  },\n  server: function(msg) {\n    logArray('SERVER', msg.split(\"\\n\"))\n  },\n  client: function(msg) {\n    logArray('CLIENT', msg.split(\"\\n\"))\n  }\n}\n\nmodule.exports.loggerOptions = {\n  enable: function() {\n    debug = true\n  },\n  disable: function() {\n    debug = false\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-email-verify/node_modules/email-verify/app.js":"#!/usr/bin/env node\n\nlet Promise = require('bluebird'),\n    verify = Promise.promisify(require('./index.js').verify),\n    argv = process.argv.slice(2),\n    getAddressFromTextFile = require('./methods/readfromfile.js').getAddressFromTextFile,\n    loggerOptions = require('./logger.js').loggerOptions,\n    logger = require('./logger.js').logger\n\nif (argv.length === 0) {\n    throw new Error('You must provide one or more email addresses.')\n}\n\nlet addresses = [],\n  domain = null,\n  err_msg = null,\n  options = {\n    port : 25,\n    sender : 'name@example.org',\n    fqdn : 'mail.example.org',\n    concurrency: 1,\n    debug: false\n  }\n\n//todo: code refactoring\nfor (var i = 0 ; i < argv.length ; i++) {\n  if (argv[i] === '-d') {\n    if (argv[++i]) {\n      domain = '@' + argv[i]\n    }\n    else {\n      err_msg = 'Malformed Domain Command'\n      break\n    }\n  }\n  else if (domain && argv[i] === '-n') {\n    if (argv[i + 1] && argv[i + 2]) {\n\n      var first = argv[++i],\n          firstletter = first.charAt(0),\n          last = argv[++i],\n          lastletter = last.charAt(0)\n\n      addresses.push(first + domain)\n      addresses.push(last + domain)\n\n      addresses.push(first + last + domain)\n      addresses.push(first + '.' + last + domain)\n      addresses.push(last + first + domain)\n      addresses.push(last + '.' + first + domain)\n\n      addresses.push(firstletter + last + domain)\n      addresses.push(firstletter + '.' + last + domain)\n      addresses.push(firstletter + lastletter + domain)\n      addresses.push(firstletter + domain)\n\n      addresses.push(last + firstletter + domain)\n      addresses.push(last + '.' + firstletter + domain)\n      addresses.push(first + lastletter + domain)\n      addresses.push(first + '.' + lastletter + domain)\n\n    }\n    else {\n      err_msg = 'Malformed Domain Command'\n      break\n    }\n  }\n  else if (domain && argv[i] === '-s') {\n    require('./standard.json').addresses.forEach(function (val, index, array) {\n      addresses.push(val + domain)\n    })\n  }\n  else if (argv[i] === '-sd' && argv[i+1]) {\n    options.sender = argv[++i]\n  }\n  else if (argv[i] === '-p' && argv[i+1] && argv[i+1] % 1 === 0) {\n    options.port = argv[++i]\n  }\n  else if (argv[i] === '-t' && argv[i+1] && argv[i+1] % 1 === 0) {\n    options.timeout = parseInt(argv[++i])\n  }\n  else if (argv[i] === '-f' && argv[i+1]) {\n    options.fqdn = argv[++i]\n  }\n  else if (argv[i] === '-dns' && argv[i+1]) {\n    options.dns = argv[++i]\n  }\n  else if (argv[i] === '-c' && argv[i+1]) {\n    options.concurrency = parseInt(argv[++i])\n  }\n  else if (argv[i] === '--debug' && argv[i+1]) {\n    options.debug = true\n  }\n  else if (domain) {\n    addresses.push(argv[i] + domain)\n  }\n  else if (argv[i] === '-file' || argv[i] === '--file'){\n    // check argv filename supplied?\n    if (!argv[i+1]) {\n      throw new Error('You must supply the path to the file.')\n    } else {\n      getAddressFromTextFile(argv[i+1])\n        .forEach(function (val, index, array) {\n          addresses.push(val)\n        })\n      break // immediately exit to prevent adding the filename itself to the addresses vars\n    }\n  }\n\n  else {\n    addresses.push(argv[i])\n  }\n}\n\nif (err_msg) {\n  console.log(err_msg)\n}\nelse {\n  if(options.debug) {\n    loggerOptions.enable()\n    logger.info('DEBUG')\n    logger.info('OPTIONS: ' + JSON.stringify(options))\n  }\n  Promise.map(addresses, function(val) {\n\n    let individualOptions = Object.assign({email:val},options)\n\n    return verify(individualOptions)\n      .then((info) => {\n        console.log(info);\n      })\n      .catch((err) => {\n        console.log(err);\n      })\n\n  }, {concurrency: options.concurrency})\n}\n","/home/travis/build/npmtest/node-npmtest-email-verify/node_modules/email-verify/methods/readfromfile.js":"let fs = require('fs')\n\nmodule.exports.getAddressFromTextFile = function(filepath) {\n  let file = { \n    exist: true, \n    extension: require('path').extname(filepath),\n    content: ''\n  }\n\n  let extensionErrorMsg = 'Sorry, you needed to put addresses list into plain text (*.txt) file. Separated each address by new line'\n\n  if(file.extension !== '.txt') throw new Error(extensionErrorMsg)\n\n  try {\n    file.content = fs.readFileSync(filepath, 'utf-8')\n  } \n  catch (e) {\n    if (e.code === 'ENOENT') console.log('File not found!',e)\n    else console.log('Error: ', e)\n    file.exist = false;\n  } \n  finally {\n\n    if (!file.exist) {\n      console.log('Error, File not found!')\n      return []\n    } \n    else {\n      let addressList = file.content.split('\\n'),\n          addressObject = {}\n\n      addressList.forEach((address)=>{\n        if(address.length > 0){\n          addressObject[address] = true\n        }\n      })\n\n      return Object.keys(addressObject)\n    }\n\n  }\n}"}